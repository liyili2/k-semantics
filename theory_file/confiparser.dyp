{

open K;;
open K;;
open Conparser;;

let rec parseAux n input out = if n < 1 then raise (Failure "Num cannot less than 1.")
         else if input > n then raise (Failure "Wrong input of parseAux.")
        else if n = input then out
        else parseAux n (input + 1) (inc out);;

let parseNum n = parseAux n 1 One;;

let parseInt n = if n < 0 then Pos (parseNum (abs n)) else if n = 0 then Zero_int 
                else Neg (parseNum (abs n));;

let rec parseNat n = if n < 0 then raise (Failure "Strict Num cannot be less than zero") 
                        else if n = 0 then Zero_nat else Suc (parseNat (n - 1));;

let parseHex c = match c with '0' -> Nibble0 | '1' -> Nibble1 | '2' -> Nibble2 | '3' -> Nibble3
            | '4' -> Nibble4 | '5' -> Nibble5 | '6' -> Nibble6 | '7' -> Nibble7 | '8' -> Nibble8
            | '9' -> Nibble9 | 'A' -> NibbleA | 'B' -> NibbleB | 'C' -> NibbleC | 'D' -> NibbleD
            | 'E' -> NibbleE | 'F' -> NibbleF | _ -> raise (Failure "A char in a string out of bound.");;

let parseHexs cl = match cl with [c] -> Char (Nibble0, parseHex c) 
                               | [c1;c2] -> Char (parseHex c1, parseHex c2) 
                               | _ -> raise (Failure "A char in a string out of bound.");;

let explode s =
  let rec exp i l =
    if i < 0 then l else exp (i - 1) (s.[i] :: l) in
  exp (String.length s - 1) [];;


let parseChar c = parseHexs (explode (Printf.sprintf "%X" (int_of_char c)));;

let parseString s = List.map (fun c -> parseChar c) (explode s);;

let dealwithSort s = match s with "K" -> K | "Bool" -> Bool | "KItem" -> KItem
         | "KLabel" -> KLabel | "KResult" -> KResult
    | "KList" -> KList | "List" -> List | "Set" -> Set
    | "Map" -> Map | "Bag" -> Bag | "Id" -> Id | "String" -> String
    | "Int" -> Int | "Float" -> Float | _ -> OtherSort (parseString s);;

let parseBagVar s = match s with "k" -> LittleK | _ -> OtherVar (parseString s)

}

%token <char list> MetaVar OtherVar
%token <char list var> BagEnd
%token <int> Number 
%token <char list var * feature list> BagHead
%token Bool K KItem KLabel KResult KList List Set Map Bag Id String Int Float
%token EOF LittleK



%relation
p9<p8<p7<p6<p5<p4<p3<p2<p1<p0

%start < (char list ,char list ,char list ) bag> main
%%

main: 
    parsebag EOF                         { $1 }
  | parsebag main EOF                    {BagCon (KTerm $1,KTerm $2)}

parsebag:
    
    MetaVar Bag                  {IdBag $1}
  | BagHead main BagEnd          {match $1 with (a,b) -> (match $3 with x -> if a = x then 
                                     Xml (a,b,KTerm $2) else raise (Failure "Xml var not match."))}
  | BagHead parsebigk BagEnd    {match $1 with (a,b) -> (match $3 with x -> if a = x then 
                                     SingleCell (a,b,$2) else raise (Failure "Xml var not match."))}
  | UnitBag                      {UnitBag}

parsebigk:

    parselist {$1}
  | parsek {$1}
  | parseset {$1}
  | parsemap {$1} 

parsek:
    parsesubk {$1}
  | parsesubk Leadsto parsek { Tilda (KTerm $1, KTerm $3)}

parsesubk:
    UnitK     {UnitK}
  | parsekitem {$1}

parselist:
    parsesublist {$1}
  | parsesublist parselist { ListCon (KTerm $1, KTerm $2)}

parsesublist:
    UnitList                        {UnitList}
  | MetaVar List                    {IdList $1}
  | ListItem LPAREN parsek RPAREN   {ListItem (KTerm $3)}

parseset:
    parsesubset {$1}
  | parsesubset parseset { SetCon (KTerm $1, KTerm $2)}

parsesubset:
    UnitSet     {UnitSet}
  | MetaVar Set                    {IdSet $1}
  | SetItem LPAREN parsek RPAREN   { SetItem (KTerm $3)}

parsemap:
    parsesubmap {$1}
  | parsesubmap parsemap { MapCon (KTerm $1, KTerm $2)}

parsesubmap:
    UnitMap     {UnitMap}
  | MetaVar Map                    {IdMap $1}
  | parsek Mapsto parsek   {MapItem (KTerm $1, KTerm $3)}

parsekitem:
    Number    {SingleK (KTerm (Constant (IntConst $1)))}
  | MetaVar K                        {IdK $1}
  | MetaVar KItem                    {SingleK (KTerm (IdKItem ($1, KItem)))}
  | LabelId LPAREN parseklist RPAREN {}

  syntax AExp  ::= Int | String | Id
                 | "++" Id
                 | "read" "(" ")"
                 > AExp "/" AExp              [left, strict]
                 > AExp "+" AExp              [left, strict]
                 > "spawn" Block              [strict]
                 > Id "=" AExp                [strict(2)]
                 | "(" AExp ")"               [bracket]
  syntax BExp  ::= Bool
                 | AExp "<=" AExp             [strict, latex({#1}\leq{#2})]
                 | "!" BExp                   [strict]
                 > BExp "&&" BExp             [left, strict]
                 | "(" BExp ")"               [bracket]
  syntax Block ::= "{" Stmts "}"
  syntax Stmt  ::= Block
                 | AExp ";"                   [strict]
                 | "if" "(" BExp ")"
                   Block "else" Block         [strict]
                 | "while" "(" BExp ")" Block [strict]
                 | "int" Ids ";"
                 | "print" "(" AExps ")" ";"
                 | "halt" ";"
                 > "join" AExp ";"            [strict]

  syntax Ids   ::= List{Id,","}
  syntax AExps ::= List{AExp,","}
  syntax Stmts ::= List{Stmt,""}              [strict(1)]

statements:
  | { [] }
  | statements statement
      @{ $2::$1, [Keep_grammar] }
  | statements load_statement
      @{ $2@$1, [Keep_grammar] }
  | statements "save" STRING<filename> ";" ";" @{
      let oc = open_out filename in
      Marshal.to_channel oc
        ($1, (snd dyp.global_data), function_free_pdev dyp.parser_pilot.pp_dev)
        [];
      close_out oc;
      $1, [Keep_grammar] }

statement:
  | expr ";" ";" { Expr_stm $1 }
  | "let" "rec" LIDENT LIDENT "=" expr ";" ";"
      { Let_rec_stm ($3,$4,$6) }
  
  | infix INT symbolchar+ ["," (symbolchar+)]* ";" ";"
      @{ let gd = infix_op ($3::$4) $2 $1 (fst dyp.global_data), snd dyp.global_data in
         Infix_stm, [Global_data gd] }
  
  | "let" LIDENT (symbolchar+)<op> LIDENT "=" expr ";" ";" @{
      let p1,p2,p3 =
        try
        let lvl, asso = Op_map.find op (fst dyp.global_data) in
        match asso with
          | Non_assoc ->
              (Lesseq_priority prio.(lvl)),
              (Lesseq_priority prio.(lvl)),prio.(lvl)
          | Right_assoc ->
              (Less_priority prio.(lvl)),
              (Lesseq_priority prio.(lvl)),prio.(lvl)
          | Left_assoc ->
              (Lesseq_priority prio.(lvl)),
              (Less_priority prio.(lvl)),prio.(lvl)
        with Not_found -> No_priority, No_priority, "default_priority"
      in
      let rhs =
        (*(Non_ter ("expr",p1))::(
        (List.map (fun _ -> Ter "TOKEN") op)
        @[Non_ter ("expr",p2)]) *)
        [Non_ter ("expr",p1);Regexp (RE_String op);Non_ter ("expr",p2)]
      in
      let rule = ("expr", rhs, p3, []) in
      (*let ol = List.map (fun x -> Token x) op in
      let ol = (Nt ("",$2))::(ol@[Nt ("",$4)]) in*)
      let ol = [Nt ("",$2);Rhs_string op;Nt ("",$4)] in
      Define_syntax,
      [Add_rules [(rule,action ol $6)]] }
  | "define" define_cont ";" ";" @{
      let bind_cons = List.map (fun (s,_,_) -> (s,"EXPR")) $2 in
      Define_syntax,
      let gd = (fst dyp.global_data), $2@(snd dyp.global_data) in
      [Global_data gd;
      Add_rules (List.map a_define_in $2); Bind_to_cons bind_cons] }

load_statement: "load" STRING<filename> ";" ";" @{
      let ic = open_in filename in
      let stmt_list, define_cont, pdev = Marshal.from_channel ic in
      close_in ic;
      let ral = List.map a_define_in define_cont in
      let pdev = import_functions pdev dyp.parser_pilot ral in
      stmt_list, [Parser pdev] }

infix:
  | "infix"  { Non_assoc }
  | "infixl" { Left_assoc }
  | "infixr" { Right_assoc }

expr:
  | expr(<=p4) "+" expr(<p4) { Plus ($1,$3) } p4
  | expr(<=p4) "-" expr(<p4) { Minus ($1,$3) } p4
  | expr(<=p5) "*" expr(<p5) { Times ($1,$3) } p5
  | expr(<=p5) "/" expr(<p5) { Div ($1,$3) } p5
  | "-" expr(=p9) { Opposite $2 } p9
  | "(" expr ")" { a_paren $2 } p9
  
  | "match" expr "with" "|"? match ["|" match]*
     { Match_with ($2,$5::$6) }
  
  | INT { Int $1 } p9
  | STRING { String $1 } p9
  | expr "," expr(<p2) { (a_comma $1 $3) } p2
  | UIDENT expr { (a_cons $1 $2) } p3
  | UIDENT { Cons ($1,(0,[])) } p3
  | LIDENT { Lident $1 } p9
  | "let" "rec" LIDENT LIDENT "=" expr "in" expr
      { Let_rec ($3,$4,$6,$8) }
  | LIDENT expr { App ($1,$2) }
  | define_in expr { $2 }

match: expr "->" expr { $1,$3 }

define_in:
  | "define" define_cont "in" @{
      let bind_cons = List.map (fun (s,_,_) -> (s,"EXPR")) $2 in
      (*dyp.next_state <- Some stdout;
      dyp.next_grammar <- Some stdout;*)
      (), [Add_rules (List.map a_define_in $2);
        Bind_to_cons bind_cons] }

define_cont:
  | LIDENT ":=" rhs "=" expr { [($1,$3,$5)] }
  | define_cont "and" LIDENT ":=" rhs "=" expr { ($3,$5,$7)::$1 }

rhs:
  | LIDENT "(" LIDENT ")" { [Nt ($1,$3)] }
  | UIDENT { [Token $1] }
  | STRING { [Rhs_string $1] }
  | LIDENT "(" LIDENT ")" rhs { (Nt ($1,$3))::$5 }
  | UIDENT rhs { (Token $1)::$2 }
  | STRING rhs { (Rhs_string $1)::$2 }
