{
open Dyp

let r_times = ("expr", [
  Non_ter ("expr",Lesseq_priority "pt");
  Regexp (RE_String "*");
  Non_ter ("expr",Less_priority "pt")
  ],"pt",[])

let a_times = (fun dyp l ->
  let x1, x2 = match l with
    | [Obj_expr x1;_;Obj_expr x2] -> x1, x2
    | _ -> failwith "action_plus"
  in
  (Obj_expr (x1*x2)), [Dont_shift])

let add_times = [
  Add_rules [r_times,a_times];
  Relation [["pi";"pt";"pp"]]]
}

%start main
%relation pi<pp
%layout [' ' '\t']

%%

main : expr "\n" { $1 }

expr :
  | ['0'-'9']+            { int_of_string $1 } pi
  | expr(<=pp) "+" expr(<pp)       { $1 + $3 } pp
  | "&" ...@{ (), add_times } expr { $3 }      pi
