.TH DYPGEN 1

.SH NAME
dypgen \- The Objective Caml parser generator

.SH SYNOPSIS
.B dypgen 
[
.I options
]
.I filename.dyp

.SH SYNOPSIS
.B dypgen.opt
[
.I options
]
.I filename.dyp

.SH SYNOPSIS
.B dyp2gram
.I filename.dyp

.SH DESCRIPTION

The
.BR dypgen (1)
command produces a parser from a context-free grammar
specification with attached semantic actions, in the style of
.BR yacc (1).
Assuming the input file is
.IR grammar \&.dyp,
running
.B dypgen
produces Caml code for a parser in the file
.IR grammar \&.ml,
and its interface in file
.IR grammar \&.mli.

The generated module defines one parsing function per entry point in
the grammar. These functions have the same names as the entry points.
The lexer (lexical analyzer) can be generated by dypgen or by a third
party generator such as
.BR ocamllex (1)
.
If an external lexer generator is used, then parsing functions take
as arguments a lexical analyzer (a function
from lexer buffers to tokens) and a lexer buffer. If dypgen is used
to generate the lexer then parsing functions only take a lexer buffer as argument.
They return the semantic attribute of the corresponding entry point.
Lexer buffers are an abstract data type
implemented in the library module Dyp. Tokens are values from
the concrete type token, defined in the interface file
.IR grammar \&.mli
produced by
.BR dypgen (1).

.BR dypgen.opt (1)
is the same as .BR dypgen (1) but compiled to native code instead of bytecode.

.BR dyp2gram (1)
is is a pearl script producing a readable text documentation of your grammar from a 
.IR grammar \&.dyp
file.

.SH OPTIONS

The
.BR dypgen (1)
command recognizes the following options:
.TP
.B --merge-warning prefix
 activates merge warning: the generated parser will emit a warning on the standard output each time a merge happens
.TP
.B  --pv-obj
the type constructor obj is made as a sum of polymorphic variants instead of a sum of constructors. This is useful when the maximum number of constructors allowed is reached.
.TP
.B  --pv-token
the type token is made as a sum of polymorphic variants instead of a sum of constructors. This is useful when the maximum number of constructors allowed is reached.
.TP
.B  --noemit-token-type
the type token is not emitted in the mli or ml files, it must be provided by the user instead.
.TP
.B  --no-pp
the value pp is not stated in the mli file.
.TP
.B  --no-obj-type
the type obj_type is not stated in the mli file.
.TP
.B  --no-undef-nt
prevents the exception Undefined_nt from being raised.
.TP
.B  --ocamlc "options"
dypgen uses these options when calling ocamlc -i.
.TP
.B  --command "command"
dypgen uses this command instead of calling ocamlc -i.
.TP
.B  --no-mli
dypgen does not generate the .mli file.
.TP
.B  --use-rule-order
dypgen uses rule order to decide which rule to reduce in case of reduce/reduce conflict, it is overriden by the variable dypgen_use_rule_order.
.TP
.B  --use-all-actions
the parser will execute all the user actions bound to a rule instead of just the first that does not raise Giveup.
.TP
.B  --cpp dypgen
calls the C preprocessor cpp on the input file before processing it.
.TP
.B  --cpp-options "options"
dypgen calls the C preprocessor cpp with options "options" on the input file before processing it.
.TP
.B  --version
gives the version of dypgen and exit.
.TP
.B  -help 
Display this list of options
.TP
.B  --help
Display this list of options


.SH SEE ALSO
.BR ocamllex (1).
.br
.IR "dypgen User's Manual"
